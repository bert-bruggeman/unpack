#!/bin/sh


UTIL_NAME="$(basename ${0})"
UTIL_VERSION="20130706"

function help () {
cat <<EOF
Usage: ${UTIL_NAME} [OPTION]... ARCHIVE
Unpack ARCHIVE to current directory if archive containts only one item
(file or directory) or to new directory named after archive name if
archive containts more than one item.

Options
  -h, --help     show help
  -v             show all processing info during unpacking
  -q, --quiet    do not print result file or directory path
  -f, --force    force item overwrite in case such already exists. In case
                 of directories it will be fully deleted before unpacking a
                 new one
      --version  print script version
EOF
}

function version () {
    echo "${UTIL_VERSION}"
}

### Delete termporary directory on interrupt
function terminate () {
    rm -rf "${TMP_DIR}" > /dev/null
    if [ -n "${DST}" ]
    then
        rm -rf "${DST}" > /dev/null
    fi
    exit 0
}
trap "terminate" SIGINT SIGHUP SIGTERM


### Parse arguments
function parse_arguments () {
    TEMP=$(getopt -o hvqf -l help,version,quiet,force -n "${UTIL_NAME}" -- "$@")
    if [ $? != 0 ] ; then echo "Try '${UTIL_NAME} --h' for more information." >&2 ; exit 1 ; fi
    eval set -- "$TEMP"
    while true ; do
        case "$1" in
	    -h|--help)
                help
                exit 0
                ;;
            --version)
                version
                exit 0
                ;;
	    -v)
                VERBOSE="TRUE"
                shift
                ;;
	    -q|--quiet)
	        DONT_SHOW_RES="TRUE"
                shift
                ;;
            -f|--force)
	        FORCE_REPLACE="TRUE"
                shift
                ;;
	    --)
	        shift
                break
                ;;
        esac
    done

    # Check number of arguments
    if [ "${#}" -gt 2 -o "${#}" -lt 1 ]
    then
        help
        exit 1
    fi

    ARCHIVE=$(readlink -f "${1}")
}

### Get from archive name its:
##    EXT      --- extension
##    BASENAME --- base name (without full path and extension
##    TMP_DIR --- path to directory to which data will be unpacked
##    temporarily
function analize_archive_name () {
    # File to unpack
    ARCHIVE_NAME=$(basename "${ARCHIVE}")
    ARCHIVE_DIR=$(dirname "${ARCHIVE}")
    
    # Check file existance
    if [ ! -f "${ARCHIVE}" ]
    then
        echo "${UTIL_NAME}: cannot find ${ARCHIVE}: no such archive file" >&2
        exit 1
    fi
    
    # Archive basename and extension (defined as substring after last '.')
    EXT=$(basename "${ARCHIVE_NAME}" | sed '/\./!s/.*//;/\./s/.*\.//' | tr [:upper:] [:lower:])
    if [ -z "${EXT}" ]; then
        echo "${UTIL_NAME}: file ${ARCHIVE} is not archive: cannot separate extension" >&2
        exit 1
    fi
    BASENAME=$(basename "${ARCHIVE}" .${EXT})
    # Subextension (defined as part after penult dot) and corresponding basename
    SUB_EXT=$(echo "${BASENAME}" | sed '/\./!s/.*//;/\./s/.*\.//' | tr [:upper:] [:lower:])
    if [ -n "${SUB_EXT}" ]; then
        SUB_BASENAME=$(basename "${ARCHIVE_NAME}" ."${SUB_EXT}"."${EXT}")
    fi

    # If sub-extension is 'tar' - use it as part of whole extension (like
    # 'tar.gz' instead of 'gz')
    if [ "${SUB_EXT}" = "tar" ]
    then
        EXT="${SUB_EXT}.${EXT}"
        BASENAME="${SUB_BASENAME}"
    fi

    # Temporary extraction path 
    TMP_DIR=$(mktemp -u -d -t ${UTIL_NAME}.XXXXXXXXXXXXX --tmpdir=.)
    TMP_DIR=$(readlink -f "${TMP_DIR}")
}

### Extract archive contant to the temporary directory
##    Each case must unpack archive with path ${ARCHIVE} to directory
##    ${TMP_DIR}.
##    Hint: If corresponding unpacking tool doesn't support target
##    directory specification - copy archive to directory previously
function tmp_extract () {
    mkdir -p "${TMP_DIR}"
    case "${EXT}" in
        "rar")
            check
            if [ -n "${VERBOSE}" ]
            then
                unrar x "${ARCHIVE}" "${TMP_DIR}"
            else
                unrar x "${ARCHIVE}" "${TMP_DIR}" > /dev/null
            fi
            ;;
        "zip")
            if [ -n "${VERBOSE}" ]
            then
                unzip -d "${TMP_DIR}" "${ARCHIVE}"
            else
                unzip -qq -d "${TMP_DIR}" "${ARCHIVE}"
            fi
            ;;
        "7z")
            cd "${TMP_DIR}"
            if [ -n "${VERBOSE}" ]
            then
                7z e  "${ARCHIVE}"
            else
                7z e "${ARCHIVE}" > /dev/null
            fi
            cd "${OLDPWD}"
            ;;
        "tar" | "tar.bz2" | "tar.gz" | "tar.xz" | "tar.lzma" | "tgz" | "tbz" | "txz")
            if [ -n "${VERBOSE}" ]
            then
                tar xvf "${ARCHIVE}" -C "${TMP_DIR}"
            else
                tar xf "${ARCHIVE}" -C "${TMP_DIR}" > /dev/null
            fi
            ;;
        "bz2")
            mkdir -p "${TMP_DIR}"
            if [ -n "${VERBOSE}" ]
            then
                bzcat -v "${ARCHIVE}" > "${TMP_DIR}/${BASENAME}"
            else
                bzcat -q "${ARCHIVE}" > "${TMP_DIR}/${BASENAME}"
            fi
            ;;
        "gz")
            mkdir -p "${TMP_DIR}"
            if [ -n "${VERBOSE}" ]
            then
                gunzip -v -c "${ARCHIVE}" > "${TMP_DIR}/${BASENAME}"
            else
                gunzip -q -c "${ARCHIVE}" > "${TMP_DIR}/${BASENAME}"
            fi
            ;;
        "xz")
            mkdir -p "${TMP_DIR}"
            if [ -n "${VERBOSE}" ]
            then
                xzcat -v -c "${ARCHIVE}" > "${TMP_DIR}/${BASENAME}"
            else
                xzcat -q -c "${ARCHIVE}" > "${TMP_DIR}/${BASENAME}"
            fi
            ;;
        "lzo")
            mkdir -p "${TMP_DIR}"
            if [ -n "${VERBOSE}" ]
            then
                lzop -d -v "${ARCHIVE}" -p"${TMP_DIR}"
            else
                lzop -d -q "${ARCHIVE}" -p"${TMP_DIR}"
            fi
            ;;
        "deb")
            cd "${TMP_DIR}"
            if [ -n "${VERBOSE}" ]
            then
                ar xv "${ARCHIVE}"
            else
                ar x "${ARCHIVE}" > /dev/null
            fi
            cd "${OLDPWD}"
            ;;
        "rpm")
            if [ -n "${VERBOSE}" ]
            then
                rpm2cpio "${ARCHIVE}" | cpio -idmuv --no-absolute-filenames "${TMP_DIR}"
            else
                rpm2cpio "${ARCHIVE}" | cpio -idmuv --no-absolute-filenames --quiet "${TMP_DIR}"
            fi
            ;;
        *)
            echo "${UTIL_NAME}: unknown archive format '${EXT}'"
            rm -rf "${TMP_DIR}" &> /dev/null
            exit 1
            ;;
    esac

    # Check for error during unpacking
    if [ "$?" -ne 0 ]; then
        terminate
    fi
}


### Increment filename
##    if given name is already taken than find which name (following
##    '<name> (N)' pattern) wasn't taken yet in this directory.

function inc_name () {
    ind="1"

    while [ -e "${1} ($ind)" ]; do
        ((ind++))
    done
    
    DST="${1} ($ind)"
}

### Finalize unpacking by moving extracted to the temporary directory
### files into needed path (following described in the README rules)
function finalize_extracted () {
    # Get number of files extracted from archive
    NUM_OF_FILES=$(ls -1 "${TMP_DIR}" | wc -l)
    if [ "${NUM_OF_FILES}" = "1" ]
        # If it is a single file or directory - unpack it to current directory
    then
        DST=$(pwd)/$(ls "${TMP_DIR}")
        ITEM=$(readlink -f "${TMP_DIR}"/*)
        ITEM=$(basename "${ITEM}")
        SRC="${TMP_DIR}"/"${ITEM}"
        # If there is more than one files in archive - unpack to directory
        # named after acrhive basename
    else
        DST=$(readlink -f ./"${BASENAME}")
        SRC="${TMP_DIR}"
    fi

    # Check if such file or directory already exists
    if [ -e "${DST}" ]
    then
        if [ -n "${FORCE_REPLACE}" ]; then
            rm -rf "${DST}"
        else
            inc_name "${DST}"
        fi
    fi

    # Move archive to destination
    mv "${SRC}" "${DST}"
    
    # Remove temporary derictory if it still exists
    rm -rf "${TMP_DIR}" &> /dev/null
}


############################################################################################
######################################## Processing ########################################

parse_arguments ${@}
analize_archive_name "${ARCHIVE}"
tmp_extract
finalize_extracted

# Show result file or directory path if needed
if [ -z "${DONT_SHOW_RES}" ]
then
    echo "${DST}"
fi
